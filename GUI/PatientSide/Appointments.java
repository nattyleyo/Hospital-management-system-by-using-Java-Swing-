/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.PatientSide;

import GUI.LoginPanel;
import java.awt.Color;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author HP
 */
public class Appointments extends javax.swing.JPanel {
private Connection conn;
    private Statement stmt;
    private PreparedStatement pstmt;
    private ResultSet rs;
    /**
     * Creates new form AdminEmployeed
     */
    public Appointments() {
        initComponents();
         JTableHeader tableHeader=DoctListTable.getTableHeader();
        tableHeader.setForeground(new Color(204,255,255));
        tableHeader.setBackground(new Color(82,2,31));
         JTableHeader tableHeader2=AppointmentListTable.getTableHeader();
        tableHeader2.setForeground(new Color(204,255,255));
        tableHeader2.setBackground(new Color(82,2,31));
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/HMS_DB";
        String username = "mahnat";
        String password = "mahnat2023";
        conn = DriverManager.getConnection(url, username, password);

        stmt = conn.createStatement();
        String createTableQuery="CREATE TABLE if not exists Appointment (" +
                                "  appointmentId int auto_increment PRIMARY KEY," +
                                "  dateOFAppointment DATE," +
                                "  timeOfAppointment TIME," +
                                "  patientId int," +
                                "  doctorId int," +
                                "appointmentStatus Varchar(30),"+
                                "  FOREIGN KEY (patientId) REFERENCES Patient(patientId)," +
                                "  FOREIGN KEY (doctorId) REFERENCES Doctor(doctorId)" +
                                ");";
        stmt.executeUpdate(createTableQuery);    
            String sql="SELECT name from Person where personId=?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1,LoginPanel.logedId);
            rs=pstmt.executeQuery();
            if(rs.next()){
                patientNameField.setText(rs.getString(1));
            }
        
       //  fetchFromTable();
       rs.close();
       pstmt.close();
        stmt.close();
        conn.close();
        }catch(ClassNotFoundException | SQLException e){
            System.out.println(e);
        }
        fetchToDoctorListTable();
         fetchToAppointmentList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new GUI.CustomStyle.Panel();
        panel1 = new GUI.CustomStyle.Panel();
        search_field = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        panel6 = new GUI.CustomStyle.Panel();
        jLabel1 = new javax.swing.JLabel();
        panel8 = new GUI.CustomStyle.Panel();
        panel9 = new GUI.CustomStyle.Panel();
        jLabel3 = new javax.swing.JLabel();
        btn_cancel = new GUI.CustomStyle.MyButton();
        btn_appoint = new GUI.CustomStyle.MyButton();
        panel14 = new GUI.CustomStyle.Panel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        panel11 = new GUI.CustomStyle.Panel();
        doctorNameField = new javax.swing.JTextField();
        panel12 = new GUI.CustomStyle.Panel();
        patientNameField = new javax.swing.JTextField();
        panel18 = new GUI.CustomStyle.Panel();
        doct_StaffId = new javax.swing.JTextField();
        fullname_placeholder1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        panel13 = new GUI.CustomStyle.Panel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        month_spin = new javax.swing.JSpinner();
        year_spin = new javax.swing.JSpinner();
        hour_spin = new javax.swing.JSpinner();
        min_spin = new javax.swing.JSpinner();
        second_spin = new javax.swing.JSpinner();
        day_spin = new javax.swing.JSpinner();
        btn_new = new GUI.CustomStyle.MyButton();
        panel7 = new GUI.CustomStyle.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AppointmentListTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DoctListTable = new javax.swing.JTable();
        panel3 = new GUI.CustomStyle.Panel();
        jLabel11 = new javax.swing.JLabel();
        panel4 = new GUI.CustomStyle.Panel();
        jLabel13 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 51, 51));

        content.setBackground(new java.awt.Color(190, 247, 255));
        content.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        search_field.setBorder(null);
        search_field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                search_fieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                search_fieldFocusLost(evt);
            }
        });
        search_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_fieldActionPerformed(evt);
            }
        });
        search_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_fieldKeyReleased(evt);
            }
        });
        panel1.add(search_field, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 600, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search.png"))); // NOI18N
        panel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 26, 28));

        content.add(panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 660, 40));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/medical-appointments.png"))); // NOI18N
        jLabel8.setText("jLabel8");
        content.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 70, -1));

        panel6.setBackground(new java.awt.Color(20, 9, 148));
        panel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 255, 255));
        jLabel1.setText("Making Appointments");
        panel6.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 270, 40));

        content.add(panel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 380, 40));

        panel8.setBackground(new java.awt.Color(255, 204, 204));
        panel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel9.setBackground(new java.awt.Color(82, 2, 31));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 255, 255));
        jLabel3.setText("Appointment--->Data");

        javax.swing.GroupLayout panel9Layout = new javax.swing.GroupLayout(panel9);
        panel9.setLayout(panel9Layout);
        panel9Layout.setHorizontalGroup(
            panel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel9Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel9Layout.setVerticalGroup(
            panel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel8.add(panel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 40));

        btn_cancel.setBackground(new java.awt.Color(23, 169, 232));
        btn_cancel.setBorder(null);
        btn_cancel.setForeground(new java.awt.Color(255, 255, 255));
        btn_cancel.setText("CANCEL");
        btn_cancel.setBorderColor(new java.awt.Color(255, 204, 204));
        btn_cancel.setColor(new java.awt.Color(23, 169, 232));
        btn_cancel.setColorClick(new java.awt.Color(23, 133, 232));
        btn_cancel.setColorOver(new java.awt.Color(0, 133, 218));
        btn_cancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_cancel.setRadius(20);
        btn_cancel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btn_cancelMouseMoved(evt);
            }
        });
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });
        panel8.add(btn_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 210, 40));

        btn_appoint.setBackground(new java.awt.Color(23, 169, 232));
        btn_appoint.setBorder(null);
        btn_appoint.setForeground(new java.awt.Color(255, 255, 255));
        btn_appoint.setText("APPOINT");
        btn_appoint.setBorderColor(new java.awt.Color(255, 204, 204));
        btn_appoint.setColor(new java.awt.Color(23, 169, 232));
        btn_appoint.setColorClick(new java.awt.Color(23, 133, 232));
        btn_appoint.setColorOver(new java.awt.Color(0, 133, 218));
        btn_appoint.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_appoint.setRadius(20);
        btn_appoint.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btn_appointMouseMoved(evt);
            }
        });
        btn_appoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_appointActionPerformed(evt);
            }
        });
        panel8.add(btn_appoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 210, 40));

        panel14.setBackground(new java.awt.Color(247, 247, 247));

        javax.swing.GroupLayout panel14Layout = new javax.swing.GroupLayout(panel14);
        panel14.setLayout(panel14Layout);
        panel14Layout.setHorizontalGroup(
            panel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel14Layout.setVerticalGroup(
            panel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panel8.add(panel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 220, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 0));
        jLabel4.setText("DoctorName");
        panel8.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 80, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 0, 0));
        jLabel5.setText("PatientName");
        panel8.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 80, 20));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 0, 0));
        jLabel7.setText("StaffID");
        panel8.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        panel11.setBackground(new java.awt.Color(247, 247, 247));
        panel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doctorNameField.setEditable(false);
        doctorNameField.setBackground(new java.awt.Color(247, 247, 247));
        doctorNameField.setBorder(null);
        doctorNameField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        doctorNameField.setOpaque(true);
        doctorNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                doctorNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                doctorNameFieldFocusLost(evt);
            }
        });
        panel11.add(doctorNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 30));

        panel8.add(panel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 200, 30));

        panel12.setBackground(new java.awt.Color(247, 247, 247));
        panel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientNameField.setEditable(false);
        patientNameField.setBackground(new java.awt.Color(247, 247, 247));
        patientNameField.setBorder(null);
        patientNameField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        patientNameField.setOpaque(true);
        patientNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                patientNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                patientNameFieldFocusLost(evt);
            }
        });
        panel12.add(patientNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 30));

        panel8.add(panel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 200, -1));

        panel18.setBackground(new java.awt.Color(247, 247, 247));
        panel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doct_StaffId.setEditable(false);
        doct_StaffId.setBackground(new java.awt.Color(247, 247, 247));
        doct_StaffId.setBorder(null);
        doct_StaffId.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        doct_StaffId.setOpaque(true);
        doct_StaffId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                doct_StaffIdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                doct_StaffIdFocusLost(evt);
            }
        });
        panel18.add(doct_StaffId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 180, 30));

        fullname_placeholder1.setFont(new java.awt.Font("Segoe UI Emoji", 0, 14)); // NOI18N
        fullname_placeholder1.setText(" fullname");
        panel18.add(fullname_placeholder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 100, 30));

        panel8.add(panel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 200, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 0, 0));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Minute");
        panel8.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, 60, 20));

        panel13.setBackground(new java.awt.Color(247, 247, 247));
        panel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panel8.add(panel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, 200, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 0, 0));
        jLabel6.setText("LocalTime");
        panel8.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 60, 20));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 0, 0));
        jLabel10.setText("LocalDate");
        panel8.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 60, 20));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 0, 0));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Second");
        panel8.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 340, 60, 20));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 0, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Year");
        panel8.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 70, 20));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 0, 0));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Hour");
        panel8.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 60, 20));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 0, 0));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Day");
        panel8.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 60, 20));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 0, 0));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Month");
        panel8.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 60, 20));

        month_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        month_spin.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        month_spin.setBorder(null);
        panel8.add(month_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, 30));

        year_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        year_spin.setModel(new javax.swing.SpinnerNumberModel(2015, 2015, 2023, 1));
        year_spin.setBorder(null);
        panel8.add(year_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 80, 30));

        hour_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        hour_spin.setModel(new javax.swing.SpinnerNumberModel(1, 0, 23, 1));
        hour_spin.setBorder(null);
        hour_spin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel8.add(hour_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 60, 30));

        min_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        min_spin.setModel(new javax.swing.SpinnerNumberModel(1, 0, 59, 1));
        min_spin.setBorder(null);
        min_spin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel8.add(min_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 60, 30));

        second_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        second_spin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        second_spin.setBorder(null);
        second_spin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel8.add(second_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 60, 30));

        day_spin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        day_spin.setModel(new javax.swing.SpinnerNumberModel(1, 1, 30, 1));
        day_spin.setBorder(null);
        day_spin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel8.add(day_spin, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, 30));

        btn_new.setBackground(new java.awt.Color(23, 169, 232));
        btn_new.setBorder(null);
        btn_new.setForeground(new java.awt.Color(255, 255, 255));
        btn_new.setText("NEW");
        btn_new.setBorderColor(new java.awt.Color(255, 204, 204));
        btn_new.setColor(new java.awt.Color(23, 169, 232));
        btn_new.setColorClick(new java.awt.Color(23, 133, 232));
        btn_new.setColorOver(new java.awt.Color(0, 133, 218));
        btn_new.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_new.setRadius(20);
        btn_new.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btn_newMouseMoved(evt);
            }
        });
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });
        panel8.add(btn_new, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 210, 40));

        content.add(panel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 240, 570));

        panel7.setBackground(new java.awt.Color(255, 204, 204));

        AppointmentListTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AppointmentListTable.setForeground(new java.awt.Color(51, 51, 51));
        AppointmentListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Appoint_ID", "Staff_ID", "DoctorName", "LocalDate", "LocalTime", "Appointment_status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        AppointmentListTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AppointmentListTable.setEditingColumn(0);
        AppointmentListTable.setEditingRow(0);
        AppointmentListTable.setFocusable(false);
        AppointmentListTable.setGridColor(new java.awt.Color(204, 204, 255));
        AppointmentListTable.setOpaque(false);
        AppointmentListTable.setRowHeight(25);
        AppointmentListTable.setSelectionBackground(new java.awt.Color(255, 239, 235));
        AppointmentListTable.setSelectionForeground(new java.awt.Color(0, 51, 255));
        jScrollPane1.setViewportView(AppointmentListTable);

        DoctListTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DoctListTable.setForeground(new java.awt.Color(51, 51, 51));
        DoctListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Staff_ID", "DoctorName", "Specilality"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        DoctListTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DoctListTable.setEditingColumn(0);
        DoctListTable.setEditingRow(0);
        DoctListTable.setFocusable(false);
        DoctListTable.setGridColor(new java.awt.Color(204, 204, 255));
        DoctListTable.setOpaque(false);
        DoctListTable.setRowHeight(25);
        DoctListTable.setSelectionBackground(new java.awt.Color(255, 239, 235));
        DoctListTable.setSelectionForeground(new java.awt.Color(0, 51, 255));
        DoctListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctListTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DoctListTable);

        panel3.setBackground(new java.awt.Color(51, 51, 51));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Doctors List");

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel3Layout.createSequentialGroup()
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        panel4.setBackground(new java.awt.Color(51, 51, 51));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("AppointmentList");

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel7Layout = new javax.swing.GroupLayout(panel7);
        panel7.setLayout(panel7Layout);
        panel7Layout.setHorizontalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel7Layout.createSequentialGroup()
                .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel7Layout.createSequentialGroup()
                        .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel7Layout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel7Layout.createSequentialGroup()
                                .addGap(230, 230, 230)
                                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 235, Short.MAX_VALUE))
                    .addGroup(panel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        panel7Layout.setVerticalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        content.add(panel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 730, 580));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, 1041, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void search_fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_search_fieldFocusGained
        //Search_placeholder.setText("");
    }//GEN-LAST:event_search_fieldFocusGained

    private void search_fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_search_fieldFocusLost
        // TODO add your handling code here:
//        Search_placeholder.setForeground(new java.awt.Color(187,187,187));
//        Search_placeholder.setFont(new java.awt.Font("Segoe UI", 0, 14));
//        Search_placeholder.setText("Search anything here . . . .");

    }//GEN-LAST:event_search_fieldFocusLost

    private void search_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_fieldActionPerformed

    private void btn_cancelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cancelMouseMoved
        // TODO add your handling code here:
        btn_cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_cancelMouseMoved

    private void btn_appointMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_appointMouseMoved
        // TODO add your handling code here:
        btn_appoint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_appointMouseMoved

    private void doctorNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doctorNameFieldFocusGained

        //fullname_placeholder.setText("");
    }//GEN-LAST:event_doctorNameFieldFocusGained

    private void doctorNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doctorNameFieldFocusLost
        // TODO add your handling code here:
        //fullname_placeholder.setForeground(new java.awt.Color(187,187,187));
        //fullname_placeholder.setFont(new java.awt.Font("Segoe UI", 0, 14));
        //fullname_placeholder.setText("fullname");
    }//GEN-LAST:event_doctorNameFieldFocusLost

    private void patientNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientNameFieldFocusGained
        // TODO add your handling code here:
      //  username_placeholder.setText("");
    }//GEN-LAST:event_patientNameFieldFocusGained

    private void patientNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientNameFieldFocusLost
        // TODO add your handling code here:
       // username_placeholder.setForeground(new java.awt.Color(187,187,187));
       // username_placeholder.setFont(new java.awt.Font("Segoe UI", 0, 14));
       // username_placeholder.setText("username");
    }//GEN-LAST:event_patientNameFieldFocusLost

    private void doct_StaffIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doct_StaffIdFocusGained
        // TODO add your handling code here:
        //age_placeholder.setText("");
    }//GEN-LAST:event_doct_StaffIdFocusGained

    private void doct_StaffIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_doct_StaffIdFocusLost
        // TODO add your handling code here:
       // age_placeholder.setForeground(new java.awt.Color(187,187,187));
       // age_placeholder.setFont(new java.awt.Font("Segoe UI", 0, 14));
        //age_placeholder.setText("age");
    }//GEN-LAST:event_doct_StaffIdFocusLost

    private void btn_appointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_appointActionPerformed
        // TODO add your handling code here:
            // TODO add your handling code here:

            int year=(Integer)year_spin.getValue();
            int month=(Integer)month_spin.getValue();
            int day=(Integer)day_spin.getValue();   
            int hour=(Integer)hour_spin.getValue();
            int miniute=(Integer)min_spin.getValue();
            int second=(Integer)second_spin.getValue();
        if(doctorNameField.getText().length()==0||year == 0||month == 0||day == 0|| miniute == 0||hour == 0||second == 0 ){
           JOptionPane.showMessageDialog(this, "Some Data is missing \nplease provide complete information!!.", "Alert", JOptionPane.WARNING_MESSAGE);
        }else{
            try {
             
                LocalDate date=LocalDate.of(year,month,day);
             LocalTime time=LocalTime.of(hour,miniute,second);
                String url = "jdbc:mysql://localhost:3306/HMS_DB";
                String username = "mahnat";
                String passwordDB = "mahnat2023";
                conn = DriverManager.getConnection(url, username, passwordDB);
                String sql1="INSERT INTO Appointment("+
                  "dateOFAppointment,timeOfAppointment,appointmentStatus,patientId,doctorId)"
                        +"values(?,?,?,?,?)";
            
                pstmt=conn.prepareStatement(sql1);
                pstmt.setDate(1,Date.valueOf(date) );
                pstmt.setTime(2, Time.valueOf(time));
                pstmt.setString(3, "pending");
                pstmt.setInt(4, LoginPanel.logedId);
                pstmt.setInt(5, Integer.parseInt(doct_StaffId.getText().substring(1,5)));
                pstmt.executeUpdate();
                 pstmt=conn.prepareStatement("Select bill from patient where patientId=?");
              pstmt.setInt(1, LoginPanel.logedId);
                rs=pstmt.executeQuery();
                double bill=0;
                if(rs.next()){
                    bill=rs.getDouble(1);
                    bill+=500;
                }
                pstmt=conn.prepareStatement("update patient set bill=? where patientID=?");
                pstmt.setDouble(1, bill);
                pstmt.setInt(2, LoginPanel.logedId);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Successfully Appointmented", "Success", JOptionPane.INFORMATION_MESSAGE);
      
                doctorNameField.setText("");
                doct_StaffId.setText("");
                day_spin.setValue(0);
                month_spin.setValue(0);
                year_spin.setValue(0);
                hour_spin.setValue(0);
                min_spin.setValue(0);
                second_spin.setValue(0); 
  
                rs.close();
                pstmt.close();
                conn.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
             fetchToAppointmentList();
        }
    }//GEN-LAST:event_btn_appointActionPerformed

    private void btn_newMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_newMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_newMouseMoved

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        int row=AppointmentListTable.getSelectedRow();
        if(row>=0){
           int result=JOptionPane.showConfirmDialog(this, "Are you sure you want to canel your appointment?","Cancel Appointment",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
           if(result==JOptionPane.YES_OPTION){
               
               try {
                   String url = "jdbc:mysql://localhost:3306/HMS_DB";
                   String username = "mahnat";
                   String passwordDB = "mahnat2023";
                   conn = DriverManager.getConnection(url, username, passwordDB);
                   pstmt=conn.prepareStatement("update Appointment set appointmentStatus=? where appointmentId=?");
                   pstmt.setString(1, "Canceled");
                   pstmt.setInt(2, Integer.parseInt(String.valueOf(AppointmentListTable.getValueAt(row, 0)).substring(2, 6)));
                   pstmt.executeUpdate();
                   fetchToAppointmentList();
               } catch (SQLException e) {
                   System.out.println(e);        
               }
                
           }else if(row<0){
               JOptionPane.showMessageDialog(this, "No rows selected please select a row!!", "Select a row", JOptionPane.WARNING_MESSAGE);
           }
        }
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void DoctListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctListTableMouseClicked
        // TODO add your handling code here:
          int row = DoctListTable.getSelectedRow();
        if(row>=0){
            String staffId=(String)DoctListTable.getValueAt(row, 0);
            String docName=(String)DoctListTable.getValueAt(row, 1);
            doct_StaffId.setText(staffId);
            doctorNameField.setText(docName);    
            }
    }//GEN-LAST:event_DoctListTableMouseClicked

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        // TODO add your handling code here:
        doctorNameField.setText("");
        doct_StaffId.setText("");
        day_spin.setValue(0);
        month_spin.setValue(0);
        year_spin.setValue(0);
        hour_spin.setValue(0);
        min_spin.setValue(0);
        second_spin.setValue(0);   
    }//GEN-LAST:event_btn_newActionPerformed

    private void search_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_fieldKeyReleased
        // TODO add your handling code here:
        if (search_field.getText().length() != 0) {
                try {
                     String url = "jdbc:mysql://localhost:3306/HMS_DB";
                     String username = "mahnat";
                     String passwordDB = "mahnat2023";
                     conn = DriverManager.getConnection(url, username, passwordDB);
                    String searchText = search_field.getText();
                    String sql="SELECT doctorId,name,speciality from Doctor D join Person P on D.doctorId=P.personId where D.speciality like (?);";
                   pstmt=conn.prepareStatement(sql);
                   pstmt.setString(1, searchText+"%");
                   rs = pstmt.executeQuery();
                    System.out.println("hello");
                    DefaultTableModel model = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; // Make all cells non-editable
                    }
                };
                model.addColumn("Staff_ID");
                model.addColumn("Doctor Name");
                model.addColumn("Speciality");
          

            while (rs.next()) {
                int staffId=rs.getInt(1);
                String staffIdStr="";
                if (staffId < 10) {
                    staffIdStr += "D000" + staffId + "/15";
                } else if (staffId < 100 && staffId >= 10) {
                    staffIdStr += "D00" + staffId + "/15";
                } else if (staffId < 1000 && staffId >= 100) {
                    staffIdStr += "D0" + staffId + "/15";
                } 

                String DocName=rs.getString(2);
                String speciality=rs.getString(3);

                model.addRow(new Object[]{staffIdStr,DocName,speciality});
            }

            DoctListTable.setModel(model);
          
            sql="SELECT A.appointmentId,A.doctorId,P.name,A.dateOFAppointment,A.timeOfAppointment,A.appointmentStatus from Appointment A join doctor D on A.doctorID=D.doctorId join Person P on D.doctorId=P.personId where appointmentStatus Like (?)";
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1, searchText+"%");
            rs = pstmt.executeQuery();
            
            model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells non-editable
                }
            };
            model.addColumn("Appoint_Id");
            model.addColumn("StaffId");
            model.addColumn("DoctorName");                        
            model.addColumn("LocalDate");
            model.addColumn("LocalTime");
            model.addColumn("Appointment_Status");
          

        while (rs.next()) {
            int ApId=rs.getInt(1);
            String ApIdStr="";
            if (ApId < 10) {
                ApIdStr += "AP000" + ApId + "/15";
            } else if (ApId < 100 && ApId >= 10) {
                ApIdStr += "AP00" + ApId + "/15";
            } else if (ApId < 1000 && ApId >= 100) {
                ApIdStr += "AP0" + ApId + "/15";
            } 
            int staffId=rs.getInt(2);
            String staffIdStr="";
            if (staffId < 10) {
                staffIdStr += "D000" + staffId + "/15";
            } else if (staffId < 100 && staffId >= 10) {
                staffIdStr += "D00" + staffId + "/15";
            } else if (staffId < 1000 && staffId >= 100) {
                staffIdStr += "D0" + staffId + "/15";
            } 
            String DoctName=rs.getString(3);
            LocalDate date=rs.getDate(4).toLocalDate();
            LocalTime time=rs.getTime(5).toLocalTime();;
            String Appoint_status=rs.getString(6);
            
            model.addRow(new Object[]{ApIdStr,staffIdStr,DoctName,date,time,Appoint_status});
        }

        AppointmentListTable.setModel(model);
            rs.close();
            pstmt.close();
            conn.close();
            } catch (SQLException e) {
                System.out.println(e);
            }
        } else {
                fetchToAppointmentList();
                fetchToDoctorListTable();
        }
    }//GEN-LAST:event_search_fieldKeyReleased
    
    public void fetchToAppointmentList() {
        try {
             String url = "jdbc:mysql://localhost:3306/HMS_DB";
             String username = "mahnat";
             String passwordDB = "mahnat2023";
            conn = DriverManager.getConnection(url, username, passwordDB);
            stmt = conn.createStatement();
            String sql="SELECT A.appointmentId,A.doctorId,P.name,A.dateOFAppointment,A.timeOfAppointment,A.appointmentStatus from Appointment A join doctor D on A.doctorID=D.doctorId join Person P on D.doctorId=P.personId where A.patientId=?";
            pstmt=conn.prepareStatement(sql);
            pstmt.setInt(1, LoginPanel.logedId);
            rs = pstmt.executeQuery();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells non-editable
                }
            };
            model.addColumn("Appoint_Id");
            model.addColumn("StaffId");
            model.addColumn("DoctorName");                        
            model.addColumn("LocalDate");
            model.addColumn("LocalTime");
            model.addColumn("Appointment_Status");
          

        while (rs.next()) {
            int ApId=rs.getInt(1);
            String ApIdStr="";
            if (ApId < 10) {
                ApIdStr += "AP000" + ApId + "/15";
            } else if (ApId < 100 && ApId >= 10) {
                ApIdStr += "AP00" + ApId + "/15";
            } else if (ApId < 1000 && ApId >= 100) {
                ApIdStr += "AP0" + ApId + "/15";
            } 
            int staffId=rs.getInt(2);
            String staffIdStr="";
            if (staffId < 10) {
                staffIdStr += "D000" + staffId + "/15";
            } else if (staffId < 100 && staffId >= 10) {
                staffIdStr += "D00" + staffId + "/15";
            } else if (staffId < 1000 && staffId >= 100) {
                staffIdStr += "D0" + staffId + "/15";
            } 
            String DoctName=rs.getString(3);
            LocalDate date=rs.getDate(4).toLocalDate();
            LocalTime time=rs.getTime(5).toLocalTime();;
            String Appoint_status=rs.getString(6);
            
            model.addRow(new Object[]{ApIdStr,staffIdStr,DoctName,date,time,Appoint_status});
        }

        AppointmentListTable.setModel(model);
        rs.close();
        stmt.close();
        conn.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
       
    }
    public void fetchToDoctorListTable(){
        try {
             String url = "jdbc:mysql://localhost:3306/HMS_DB";
             String username = "mahnat";
             String passwordDB = "mahnat2023";
            conn = DriverManager.getConnection(url, username, passwordDB);
            stmt = conn.createStatement();
            String sql="SELECT doctorId,name,speciality from Doctor join Person on doctorId=personId";
            
            
            rs = stmt.executeQuery(sql);

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Make all cells non-editable
                }
            };
            model.addColumn("Staff_ID");
            model.addColumn("Doctor Name");
            model.addColumn("Speciality");
          

        while (rs.next()) {
            int staffId=rs.getInt(1);
            String staffIdStr="";
            if (staffId < 10) {
                staffIdStr += "D000" + staffId + "/15";
            } else if (staffId < 100 && staffId >= 10) {
                staffIdStr += "D00" + staffId + "/15";
            } else if (staffId < 1000 && staffId >= 100) {
                staffIdStr += "D0" + staffId + "/15";
            } 
            
            String DocName=rs.getString(2);
            String speciality=rs.getString(3);
            
            model.addRow(new Object[]{staffIdStr,DocName,speciality});
        }

        DoctListTable.setModel(model);

        rs.close();
        stmt.close();
        conn.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AppointmentListTable;
    private javax.swing.JTable DoctListTable;
    private GUI.CustomStyle.MyButton btn_appoint;
    private GUI.CustomStyle.MyButton btn_cancel;
    private GUI.CustomStyle.MyButton btn_new;
    private GUI.CustomStyle.Panel content;
    private javax.swing.JSpinner day_spin;
    private javax.swing.JTextField doct_StaffId;
    private javax.swing.JTextField doctorNameField;
    private javax.swing.JLabel fullname_placeholder1;
    private javax.swing.JSpinner hour_spin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner min_spin;
    private javax.swing.JSpinner month_spin;
    private GUI.CustomStyle.Panel panel1;
    private GUI.CustomStyle.Panel panel11;
    private GUI.CustomStyle.Panel panel12;
    private GUI.CustomStyle.Panel panel13;
    private GUI.CustomStyle.Panel panel14;
    private GUI.CustomStyle.Panel panel18;
    private GUI.CustomStyle.Panel panel3;
    private GUI.CustomStyle.Panel panel4;
    private GUI.CustomStyle.Panel panel6;
    private GUI.CustomStyle.Panel panel7;
    private GUI.CustomStyle.Panel panel8;
    private GUI.CustomStyle.Panel panel9;
    private javax.swing.JTextField patientNameField;
    private javax.swing.JTextField search_field;
    private javax.swing.JSpinner second_spin;
    private javax.swing.JSpinner year_spin;
    // End of variables declaration//GEN-END:variables
}
